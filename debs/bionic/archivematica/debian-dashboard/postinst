#!/bin/bash

# Runs Django's command-line utility for administrative tasks inside the
# Python virtual environment bundled with the package.
function dashboard::manage {
    # Certain tasks like compilemessages rely on the current directory.
    pushd /usr/share/archivematica/dashboard
    /usr/share/archivematica/virtualenvs/archivematica/bin/python manage.py "$@"
    popd
}

# Create logs directory
logdir=/var/log/archivematica/dashboard
mkdir -p $logdir
chown -R archivematica:archivematica $logdir
chmod -R g+s $logdir

# Create Django key
KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 50 | head -n 1)
sed -i "s/CHANGE_ME_WITH_A_SECRET_KEY/\"$KEY\"/g" /etc/default/archivematica-dashboard

# Populate default mysql config
DBPASS=$(grep "dbc_dbpass=" /etc/dbconfig-common/archivematica-mcp-server.conf| cut -d\= -f2- | tr -d \')
sed -i "s/^\(ARCHIVEMATICA_DASHBOARD_CLIENT_PASSWORD=\).*/\1$DBPASS/g" /etc/default/archivematica-dashboard

DBUSER=$(grep "dbc_dbuser=" /etc/dbconfig-common/archivematica-mcp-server.conf| cut -d\= -f2- | tr -d \')
sed -i "s/^\(ARCHIVEMATICA_DASHBOARD_CLIENT_USER=\).*/\1$DBUSER/g" /etc/default/archivematica-dashboard

DBNAME=$(grep "dbc_dbname=" /etc/dbconfig-common/archivematica-mcp-server.conf| cut -d\= -f2- | tr -d \')
sed -i "s/^\(ARCHIVEMATICA_DASHBOARD_CLIENT_DATABASE=\).*/\1$DBNAME/g" /etc/default/archivematica-dashboard

# Use ucf to preserve user changes in the default file
ucfr archivematica-dashboard /etc/default/archivematica-dashboard
ucf --debconf-ok /etc/default/archivematica-dashboard /etc/default/archivematica-dashboard

find /usr/share/archivematica/dashboard/ -name '*.pyc' -delete

#this is required to allow syncdb to work properly
set -a
source /etc/default/archivematica-dashboard
set +a

# Run migrations
dashboard::manage migrate --settings='settings.production' --noinput

# Collect static content
mkdir -p /usr/share/archivematica/dashboard/static
dashboard::manage collectstatic --noinput --clear

# Compile messages
dashboard::manage compilemessages

#DEBHELPER#
